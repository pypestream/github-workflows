name: Build Tag
on:
  workflow_call:
    inputs:
      base_image_path: 
        type: string
        required: true
        default: devops/docker_build
        description: Default base path for docker image to be pushed
      repo_name:
        type: string
        required: false
        default: default_repo
        description: "Custom param for docker image repository name to push to"
      images_to_pull:
        type: string
        required: false
        default: empty
        description: To overcome vpn issue in tag builds unable to pull images after some time VPN disconnects, provide "," spearated images e.g (nginx:latest,otherimage:tag)
      debug:
        type: boolean
        required: false
        default: false
        description: Enables debug logs for vpn
    secrets:
      harbor_username:
        required: true
        description: Username for harbor registry
      harbor_password:
        required: true
        description: Password for harbor registry
      registry_url:
        required: true
        description: Harbor registry url
      vpn_profile:
        required: true
        description: VPN Profile that is used to connect to private infra
      gh_personal_access_token:
        required: true
        description: Github token that can be used for building apps or adding comments to PR etc
      ssh_private_key:
        required: true
        description: Required private key to use ssh-agent for installing dependencies from github private repos.


jobs:
  build-tag:
    runs-on: ubuntu-latest
    steps:

      - uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Set output
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/*/}

      - name: Check output
        env:
          RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
        run: |
          echo $RELEASE_VERSION
          echo ${{ steps.vars.outputs.tag }}

      - uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.ssh_private_key }}
      - id: vpn
        name: Setting up VPN
        uses: pypestream/github-workflows/.github/actions/start-vpn@master
        with:
          vpn_profile: ${{ secrets.vpn_profile }}
          registry_url: ${{ secrets.registry_url }}

      - id: check-vpn
        name: Checking VPN connection
        run: |
          IS_VPN_CONNECTED=${{ steps.vpn.outputs.IS_VPN_CONNECTED }}
          if [ ${IS_VPN_CONNECTED} -eq false ]; then
            echo "VPN is not connected so failing the job, please run this workflow with debug mode to see vpn logs in the artifacts"
            exit 1
          fi

      - id: repo
        run: |
          repo_name=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
          echo "::set-output name=REPO_NAME::$repo_name"
      
      - name: Build Docker Image
        run: |
          IMAGES_TO_PULL=${{ inputs.images_to_pull }}
          if [ ${IS_VPN_CONNECTED} -eq "empty" ]; then
            echo "Nothing to pull"
          else
            images=${images//,/$'\n'}  # change the semicolons to white space
            for image in $images
            do
                docker pull $image
            done
          fi
          docker login ${{ secrets.registry_url }} --username ${{ secrets.harbor_username }} --password ${{ secrets.harbor_password }}
          make build image=${{ steps.repo.outputs.REPO_NAME }} version=latest github_token=${{ secrets.gh_personal_access_token }}
          
      - name: Push Docker Image To Registry
        run: |
          if [ "${{ inputs.repo_name }}" == "default_repo" ]; then
              repo_name=${{ steps.repo.outputs.REPO_NAME }}
          else
              repo_name=${{ inputs.repo_name }}
          fi
          echo $docker_tag
          docker tag ${{ steps.repo.outputs.REPO_NAME }}:latest ${{ secrets.registry_url }}/${{ inputs.base_image_path }}/"$repo_name":${{ steps.vars.outputs.tag }}
          docker push ${{ secrets.registry_url }}/${{ inputs.base_image_path }}/"$repo_name":${{ steps.vars.outputs.tag }}

      - id: vpn-disconnect
        name: Post RUN Stops VPN
        if: always()
        uses: pypestream/github-workflows/.github/actions/stop-vpn@master
        with:
          debug: ${{ inputs.debug }}
      
