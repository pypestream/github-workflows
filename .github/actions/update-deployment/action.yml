name: 'Update application deployment'
description: 'Updates application version using argocd repository'
inputs:
  githubToken:
    required: true
    description: Github token to clone repository
  appName:
    required: true
    description: Application path in the deployment repository app.<name>
  version:
    required: true
    description: Version to update
  environment:
    required: true
    description: Environment where app should be deployed could be multiple e.g (main,candidate)
  argocdRepository:
    required: false
    description: Argocd repository
    default: pypestream/argocd-deployments
  argocdBranch:
    required: true
    description: Argocd repository branch
    default: candidate
  dryRun:
    required: false
    default: false
    description: Dry run to test the shared action

runs:
  using: "composite"
  steps:

    - name: Checkout deployment repository
      uses: actions/checkout@v4
      with:
        repository: pypestream/argocd-deployments
        token: ${{ inputs.githubToken }}
        path: deployment-repo

    - name: Determine changes based on environment input
      id: determine_changes
      shell: bash
      run: |
        REPLACED_ENVIRONMENT=${{ inputs.environment }}
        REPLACED_ENVIRONMENT="${REPLACED_ENVIRONMENT//release/uat}"
        IFS=',' read -r -a environments <<< "$REPLACED_ENVIRONMENT"
        IFS=',' read -r -a appNames <<< "${{ inputs.appName }}"

        changes="{"

        for env in "${environments[@]}"; do
          env_key="app-versions-${env}.yml"
          app_versions=""

          for app in "${appNames[@]}"; do
            if [ -z "$app_versions" ]; then
              app_versions="\"apps.$app.version\": \"${{ inputs.version }}\""
            else
              app_versions="$app_versions, \"apps.$app.version\": \"${{ inputs.version }}\""
            fi
          done

          if [ "$changes" == "{" ]; then
            changes="$changes\"$env_key\": { $app_versions }"
          else
            changes="$changes, \"$env_key\": { $app_versions }"
          fi
        done

        changes="$changes}"

        echo "changes=$changes" >> $GITHUB_ENV


    - name: Printe Changes
      shell: bash
      run: |
        echo ${{ env.changes }}

    - name: Update version in YAML files
      uses: fjogeleit/yaml-update-action@main
      if: ${{ inputs.dryRun == 'false' }}
      with:
        token: ${{ inputs.githubToken }}
        branch: deploy/${{ inputs.appName }}-${{ inputs.environment }}-${{ inputs.version }}
        labels: automerge
        workDir: deployment-repo
        message: 'Updated ${{ inputs.appName }} version in ${{ inputs.environment }} with ${{ inputs.version }}'
        createPR: true
        repository: ${{ inputs.argocdRepository }}
        targetBranch: candidate
        masterBranchName: candidate
        changes: ${{ env.changes }}
